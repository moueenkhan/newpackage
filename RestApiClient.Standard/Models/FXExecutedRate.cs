// <copyright file="FXExecutedRate.cs" company="APIMatic">
// Copyright (c) APIMatic. All rights reserved.
// </copyright>
namespace RestApiClient.Standard.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using JsonSubTypes;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using RestApiClient.Standard;
    using RestApiClient.Standard.Utilities;

    /// <summary>
    /// FXExecutedRate.
    /// </summary>
    public class FXExecutedRate
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FXExecutedRate"/> class.
        /// </summary>
        public FXExecutedRate()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FXExecutedRate"/> class.
        /// </summary>
        /// <param name="fxRate">fxRate.</param>
        /// <param name="fxFeeAmount">fxFeeAmount.</param>
        /// <param name="fxTicketID">fxTicketID.</param>
        public FXExecutedRate(
            Models.FXRate fxRate,
            Models.MonetaryValue fxFeeAmount = null,
            Models.FXTicketID fxTicketID = null)
        {
            this.FxFeeAmount = fxFeeAmount;
            this.FxRate = fxRate;
            this.FxTicketID = fxTicketID;
        }

        /// <summary>
        /// Represents a monetary value containing a decimal amount value along with a currency code. The currency code is a three letter ISO 4217 code. E.g. GBP for British sterling pounds.
        /// </summary>
        [JsonProperty("fxFeeAmount", NullValueHandling = NullValueHandling.Ignore)]
        public Models.MonetaryValue FxFeeAmount { get; set; }

        /// <summary>
        /// Represents an FX rate between two currencies, the rate is restricted to 6 decimal places. The currency code is a three letter ISO 4217 code. E.g. GBP for British sterling pounds.
        /// </summary>
        [JsonProperty("fxRate")]
        public Models.FXRate FxRate { get; set; }

        /// <summary>
        /// The unique FX Ticket ID generated by the Earthport payment system.
        /// </summary>
        [JsonProperty("fxTicketID", NullValueHandling = NullValueHandling.Ignore)]
        public Models.FXTicketID FxTicketID { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"FXExecutedRate : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is FXExecutedRate other &&
                ((this.FxFeeAmount == null && other.FxFeeAmount == null) || (this.FxFeeAmount?.Equals(other.FxFeeAmount) == true)) &&
                ((this.FxRate == null && other.FxRate == null) || (this.FxRate?.Equals(other.FxRate) == true)) &&
                ((this.FxTicketID == null && other.FxTicketID == null) || (this.FxTicketID?.Equals(other.FxTicketID) == true));
        }
        

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"this.FxFeeAmount = {(this.FxFeeAmount == null ? "null" : this.FxFeeAmount.ToString())}");
            toStringOutput.Add($"this.FxRate = {(this.FxRate == null ? "null" : this.FxRate.ToString())}");
            toStringOutput.Add($"this.FxTicketID = {(this.FxTicketID == null ? "null" : this.FxTicketID.ToString())}");
        }
    }
}